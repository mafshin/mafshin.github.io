{"title":"Develop for Azure Blob Storage and Amazon S3 without Subscription","description":"Learn how to develop storage solutions for Azure Blob Storage and Amazon S3 Storage without having a subscription","slug":"azure-blob-storage-amazon-s3-dotnet-core-without-subscription","html":"<p><img src=\"azure-blob-storage-amazon-s3.png\" alt=\"Azure Storage - Amazon S3 Storage\"></p>\n<p>Writing cloud software solutions have been never easier and more convient than now. But sometimes there are some barriers than prevent us, developers, from trying new technologies. For example not everybody has access to an Azure subscription or Amazon Cloud to try those cool cloudy things. But as always, there is a room. In this article we will look at two local deployable storage solutions that you can use both for developing cloud storage solutions and also for your on-premise customers.</p>\n<h2 id=\"on-permise-storage-solutions\">On-permise Storage Solutions:</h2>\n<ol>\n<li>Azurite, Azure Storage API Compatible (Local/Dev Testing)</li>\n<li>Zenko CloudServer, Amazon S3 Compatible (Production Ready)</li>\n</ol>\n<h1 id=\"azurite\">Azurite</h1>\n<p><a href=\"https://github.com/Azure/Azurite\">Azurite</a> is a Node.js solution which is compatible with Azure Storage API and acts as an emulator of real Azure Storage. You can easily run it in your machine to develop and test your storage solution. Once you are happy with your code if you need to run it against Azure Storage, just change the configuration to an Azure Storage one and you&#39;re done.</p>\n<p>You can run Azurite on docker with the following command just by replacing <code>c:/azurite</code> with some path in your machine to store actual blob files:</p>\n<pre><code>docker run -p 10000:10000 -p 10001:10001 -v c:/azurite:/data mcr.microsoft.com/azure-storage/azurite\n</code></pre>\n<p>Once you have the Azurite running, you can use the default connection string to connect to it via Azure Storage Explorer app or Azure Storage SDK:</p>\n<pre><code>DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;QueueEndpoint=http://127.0.0.1:10001/devstoreaccount1;\n</code></pre>\n<p>To explore your Azurite instance install <a href=\"https://azure.microsoft.com/en-us/features/storage-explorer\">Azure Storage Explorer</a> and in the Add Account section select &quot;Local Storage Emulator&quot; and go ahead with default port numbers.</p>\n<p>To develop your storage solution, first install Azure Blob Storage SDK nuget into your project</p>\n<pre><code>dotnet add package Azure.Storage.Blobs\n</code></pre>\n<p>And with your Azurite connection string you can now do the following operations:</p>\n<h3 id=\"create-an-azure-storage-container\">Create an Azure Storage Container</h3>\n<p>You can think of a container just like folders in your system.</p>\n<pre><code>BlobContainerClient container = new BlobContainerClient(connectionString, containerName);\n\ncontainer.Create();\n</code></pre>\n<h3 id=\"upload-a-file-to-the-container\">Upload a file to the container</h3>\n<pre><code>BlobContainerClient container = new BlobContainerClient(connectionString, containerName);\n\nBlobClient blob = container.GetBlobClient(blobName);\n\nblob.UploadFile(filePath);\n</code></pre>\n<h3 id=\"download-a-file-from-the-container\">Download a file from the container</h3>\n<pre><code>BlobContainerClient container = new BlobContainerClient(connectionString, containerName);\n\nBlobClient blob = container.GetBlobClient(blobName);\n\nusing(FileStream downStream = new FileStream(donwloadFilePath, FileMode.Create))\n{\n    blob.DownloadTo(downStream);\n}\n</code></pre>\n<h1 id=\"zenko-cloudserver\">Zenko CloudServer</h1>\n<p>There are lots of S3 compatible storage solutions available in the market but not all of them can be used as an on-premise solution in commercial products specially if your software is closed source then you need to think about the licenses. Fortunately Zenko CloudServer has Apache 2.0 license which can be used in commercial products. </p>\n<p>To run Zenko CloudServer in your machine, run it with the following docker command replacing the volume paths with some valid folders in your machine to store storage data:</p>\n<pre><code>docker run -p 8000:8000 -v c:/cloudserver/data:/usr/src/app/localData -v c:/cloudserver/metadata//usr/src/app/localMetadata zenko/cloudserver\n</code></pre>\n<p>To test if your storage is up and running you can use a S3 compatible client like <a href=\"https://s3browser.com/\">S3 Browser</a> (Windows app). After installing that create a new account in the application with the following specifications:</p>\n<ul>\n<li>Storage Type: S3 Compatbile Storage</li>\n<li>REST Endpoint: 127.0.0.1:8000</li>\n<li>Access Key Id: secretKey1 (default key, you can change it)</li>\n<li>Secret Access Key: verySecretKey1</li>\n<li>Use secure transfer (SSL/TLS): Unchecked.</li>\n</ul>\n<p>Now you can browse your Zenko CloudServer, create bucket and perform upload and download operations.</p>\n<p>With your S3 storage ready, head over to your .NET Core application. Now you can perform the following operations on your S3 compatible storage:</p>\n<h3 id=\"create-a-s3-client\">Create a S3 client</h3>\n<pre><code>    var accessKey = &quot;accessKey1&quot;;\n    var secretKey = &quot;verySecretKey1&quot;;\n\n    var config = new AmazonS3Config() {\n        ServiceURL = &quot;http://127.0.0.1:8000&quot;,\n        ForcePathStyle = true\n    };\n\n    // Create an S3 client object.\n    var s3Client = new AmazonS3Client(accessKey, secretKey, config);\n</code></pre>\n<h3 id=\"create-a-s3-bucket\">Create a S3 bucket</h3>\n<pre><code>await s3Client.PutBucketAsync(bucketName);\n</code></pre>\n<p><div id=\"102486158\">\n\t\t<script type=\"text/javascript\">\n\t\t\ttry {\n\t\t\t\twindow._mNHandle.queue.push(function (){\n\t\t\t\t\twindow._mNDetails.loadTag(\"102486158\", \"300x250\", \"102486158\");\n\t\t\t\t});\n\t\t\t}\n\t\t\tcatch (error) {}\n\t\t</script>\n\t</div></p>\n<h3 id=\"upload-a-file-to-s3-storage\">Upload a file to S3 storage</h3>\n<pre><code>    // key is the name of blob which will be created in storage\n    var key = Path.GetFileName(filePath);\n\n    var request = new UploadPartRequest()\n    {\n        BucketName = bucketName,\n        FilePath = filePath,\n        Key = key \n    };\n    await s3Client.UploadPartAsync(request);\n</code></pre>\n<h3 id=\"download-a-file-from-s3-storage\">Download a file from S3 storage</h3>\n<pre><code>    var downloadRequest = new GetObjectRequest()\n    {\n        BucketName = bucketName,\n        Key = key // the name of file in the bucket\n    };\n\n    var downloadResponse = await s3Client.GetObjectAsync(downloadRequest);\n\n    using(FileStream downStream = new FileStream(downloadPath, FileMode.Create))\n    {\n        downloadResponse.ResponseStream.CopyTo(downStream);\n    }\n</code></pre>\n<p>In this tutorial we learned how to use some cool open-source projects to simulate Azure Blob Storage and Amazon S3 Storage for developing storage dependent parts of our projects. Also we performed three main storage operations: creating a bucket, uploading a file and downloading a file from these storages. More advanced features like resumable multi part upload and downloads with cancellation tokens can easily be developed with both Azure Storage and Amazon SDKs.</p>\n<p>Enjoy your data transfer with cloud storages ;-)</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/storage/Azure.Storage.Blobs/README.md\">https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/storage/Azure.Storage.Blobs/README.md</a></li>\n<li><a href=\"https://docs.aws.amazon.com/sdk-for-net/v3/developer-guide/quick-start-s3-1-winvs.html\">https://docs.aws.amazon.com/sdk-for-net/v3/developer-guide/quick-start-s3-1-winvs.html</a></li>\n<li><a href=\"https://github.com/Azure/Azurite\">https://github.com/Azure/Azurite</a></li>\n<li><a href=\"https://www.zenko.io/cloudserver\">https://www.zenko.io/cloudserver</a></li>\n</ul>\n","tags":["azure-blob-storage","amazon-s3","s3-compatible","zenko","zenko-cloudserver","azurite","s3-emulator","blob-storage","local-storage","s3-dotnet-core","azure-stroage-dotnet-core"],"updatedDate":"2021-03-05","image":"azure-blob-storage-amazon-s3.png"}