{"title":"Portfolio Website with Github Pages, Sapper (Svelte) and Custom Domain Name","description":"Learn how to create a personl website with Sapper framework and host it freely on Github Pages and finally map your custom domain name to Github Pages subdomain.","slug":"github-pages-sapper-custom-domain","html":"<p><img src=\"sapper-svelte-github-pages-custom-domain.png\" alt=\"Sapper Website in Github Pages\"></p>\n<p>Decided to have your own personal website but don&#39;t like to spend hard-earned money on hosting solutions for a website that will get only just a few visits per day or even a week? If so then you are in the right page. Follow with me to see how you can have your own fully working fast website bundled with your own custom domain at no cost for hosting that.</p>\n<h2 id=\"steps\">Steps</h2>\n<ol>\n<li>Create a Github Pages Repository</li>\n<li>Configure Your Custom Domain Name</li>\n<li>Create a Sapper Project</li>\n<li>Publish Static Exported Site to Github Pages</li>\n</ol>\n<p>Github allows you to have a special repository under your personal account and have it bound to a automatically generated Github subdomain and that&#39;s <a href=\"https://pages.github.com/\">Github Pages</a>. Github Pages will server static websites so you can easily export your React or Sapper project and push the result into this special repository and have it served with a subdomain that Github creates for you.</p>\n<h2 id=\"create-a-github-pages-repository\">Create a Github Pages Repository</h2>\n<p>First you need to create a public repository named <code>youraccount.github.io</code> then push the static content which can be as simple as a <code>index.html</code> file to this repository and done. You have a personal website with an accessible URL.</p>\n<p>For example for my Github account (mafshin), I would create a public repository named mafshin.github.io.</p>\n<h2 id=\"use-your-custom-domain-name\">Use your Custom Domain Name</h2>\n<p>Once you have your special Github Pages repository ready, go to the repository <strong>Settings</strong> page, in the bottom of the page you have <strong>Github Pages</strong> section with an input field named <strong>Custom Domain</strong>. Enter your domain name here (e.g mafshin.com) and press <strong>Save</strong>. Github will add a CNAME file to your repository with the value of your custom domain name. This file will guide Github to recognize that your custom domain is an alias name for your Github Pages repository subdomain (e.g mafshin.github.io).</p>\n<p>Beside that you also need to add <strong>A</strong> records to your domain DNS provider to relay requests of your domain name to Github servers. For doing so, follow these steps:</p>\n<ol>\n<li><p>Change your domain name NS records in your domain control panel to a DNS provider like <a href=\"http://cloudflare.com/\">Cloudflare</a></p>\n</li>\n<li><p>Inside DNS provider control panel, for each <a href=\"https://docs.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain\">IP Address of Github Pages</a> add an <strong>A</strong> record.</p>\n<p>When those A records are present and your special Github Pages repository have that CNAME file then you can browse to your custom domain name and the contents of the repository will be served as a static website.</p>\n</li>\n</ol>\n<h2 id=\"using-sapper\">Using Sapper</h2>\n<p>As I said you can host any static website in Github pages but it would be nice to have some well structured framework based website so that you can easily update its contents. There are lots of JS Frameworks available out there which you can use like React, Angular, VueJS, etc. In this tutorial we use the new player in JS Frameworks, Svelte powered framework Sapper. </p>\n<h3 id=\"create-a-simple-sapper-project\">Create a simple Sapper project</h3>\n<p>Run the following commands to have <a href=\"https://sapper.svelte.dev/\">Sapper</a> default template project cloned and compiled.</p>\n<pre><code>npx degit &quot;sveltejs/sapper-template#rollup&quot; my-site\n\ncd my-site\n\nnpm install\n\nnpm run dev &amp; open http://localhost:3000\n</code></pre>\n<p>Now you can browse to <a href=\"http://localhost:3000\">http://localhost:3000</a> to see the output.</p>\n<h3 id=\"exporting-static-website-from-sapper\">Exporting static website from Sapper</h3>\n<p>Run the command <code>npm run export</code> and the exported version of your website will be available in this folder: <code>__sapper__/export</code>. Now you must commit the content of this folder to your special Github Pages repository.</p>\n<p>Can I export my project directly to Github Pages? Yes you can.</p>\n<p>This functionality is available via a npm package named <a href=\"https://www.npmjs.com/package/gh-pages\">gh-pages</a> which can commit the content of a folder to the Github Pages repository. </p>\n<p>So first create a file named <code>deploy.js</code> in you <code>scripts</code> folder of Sapper project and put the following into that (update <em>your-github-account</em>):</p>\n<pre><code>const ghpages = require(&#39;gh-pages&#39;);\n\nghpages.publish(\n\n    &#39;__sapper__/export&#39;,\n    {\n        branch: &#39;master&#39;,\n        repo: &quot;https://github.com/your-github-account/your-github-account.github.io.git&quot;,\n        user: {\n            name: &#39;your-github-account&#39;,\n            email: &#39;your-email&#39;\n        }\n    },\n    () =&gt; {\n        console.log(&#39;Deploy Complete!&#39;)\n    }\n)\n</code></pre>\n<p>Also edit your <code>package.json</code> and add the following line to <code>scripts</code> section:</p>\n<pre><code>&quot;deploy&quot;: &quot;npm run export &amp;&amp; shx cp CNAME __sapper__/export/CNAME &amp;&amp; node ./scripts/deploy.js&quot;\n</code></pre>\n<p>Then add the same CNAME file that Github created in your repository to the root folder of your Sapper project. You can also easily create a file named <strong>CNAME</strong> (without any extension) and type your custom domain name in that.</p>\n<p>Also you need to install this package which I used for copying the CNAME file to the exported folder so that it is pushed as part of project.</p>\n<pre><code>npm install shx --save-dev\n</code></pre>\n<p>Finally apply your desired changes to the Sapper project and once you are happy, run the following command which will export your website and push it the Github Pages repository:</p>\n<p><code>npm run deploy</code></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://medium.com/@hiiamanshul/deploying-sapper-pwa-using-github-pages-step-by-step-tutorial-part-1-1e9828dfe4de\">https://medium.com/@hiiamanshul/deploying-sapper-pwa-using-github-pages-step-by-step-tutorial-part-1-1e9828dfe4de</a></li>\n</ul>\n","tags":["github-pages","free-website","svelte","sapper","free-hosting"],"updatedDate":"2021-02-20","image":"sapper-svelte-github-pages-custom-domain.png"}